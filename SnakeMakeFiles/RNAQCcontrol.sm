include:"pipeline.conf"


rule all:
  input: MAIN_DIR + "results/multiqc_report.zip", MAIN_DIR +"results/RSeQC_report.pdf"


  
ruleorder: gatherQCdtaPE > gatherQCdtaSE 
ruleorder: run_fastQC_SE >run_fastQC_PE

#### FASTQC snakemake START #######
# Run FASTQC on samples;
rule run_fastQC_PE:
  input: MAIN_DIR + 'reads/{sample}.{suffix}.fastq.gz'
  output: MAIN_DIR +"reads/{sample}.{suffix}_fastqc.html"
  shell: "fastqc {input}"

rule run_fastQC_SE:
	input: MAIN_DIR + 'reads/{sample}.fastq.gz'
	output: MAIN_DIR +"reads/{sample}_fastqc.html"
	shell: "fastqc {input}"
	  
	  
#### FASTQC snakemake STOP #######

#### RSeQC snakemake START #######

# Convert GTF to GenePred
rule GTF2GenePred:
  input: MAIN_DIR + 'reference/annotation/contigs.gtf'
  output: MAIN_DIR + 'reference/annotation/contigs.genePred'
  shell: 'gtfToGenePred {input}  {output}'

# Convert GenePred to Bed12
rule GTF2BED12:
  input: MAIN_DIR + 'reference/annotation/contigs.genePred'
  output: MAIN_DIR + 'reference/annotation/contigs.bed'
  shell: 'genePredToBed  {input}  {output}'

# Get length count for the contigs in the sequence.
rule RSEQC_TIN_single_bam:
  input:  bam = MAIN_DIR + "mapping/bamFiles/{sample}.bam" ,  bed = MAIN_DIR + 'reference/annotation/contigs.bed'
  output: exelFile = MAIN_DIR + "RSeQC/{sample}.tin.xls" , summaryFile = MAIN_DIR + "RSeQC/{sample}.tin.summary.txt"
  run:
    shell('tin.py -i {input.bam} -r {input.bed}  > RSeQC/{wildcards.sample}.TIN.log')
    shell('mv {wildcards.sample}.tin.xls {output.exelFile}')
    shell('mv {wildcards.sample}.summary.txt {output.summaryFile}')

rule RSEQC_clipping_profile_single_bam:
  input:  bam = MAIN_DIR + "mapping/bamFiles/{sample}.bam"
  output: gbc = MAIN_DIR + "RSeQC/{sample}.clipping_profile.r"
  shell: 'clipping_profile.py -i {input.bam} -o RSeQC/{wildcards.sample} -s "'+LAYOUT+'" > RSeQC/{wildcards.sample}.clipping_profile.log'

rule RSEQC_inner_distance_single_bam:
  input:  bam = MAIN_DIR + "mapping/bamFiles/{sample}.bam" ,  bed = MAIN_DIR + 'reference/annotation/contigs.bed'
  output: gbc = MAIN_DIR + "RSeQC/{sample}.inner_distance_freq.txt"
  shell: 'inner_distance.py -r {input.bed} -i {input.bam} -o RSeQC/{wildcards.sample} > RSeQC/{wildcards.sample}.inner_distance.log'

rule RSEQC_junction_saturation_single_bam:
  input:  bam = MAIN_DIR + "mapping/bamFiles/{sample}.bam" ,  bed = MAIN_DIR + 'reference/annotation/contigs.bed'
  output: gbc = MAIN_DIR + "RSeQC/{sample}.junctionSaturation_plot.r"
  shell: 'junction_saturation.py -r {input.bed} -i {input.bam} -o RSeQC/{wildcards.sample} > RSeQC/{wildcards.sample}.junction_saturation.log'

rule RSEQC_geneBody_coverage_single_bam:
  input:  bam = MAIN_DIR + "mapping/bamFiles/{sample}.bam" ,  bed = MAIN_DIR + 'reference/annotation/contigs.bed'
  output: gbc = MAIN_DIR + "RSeQC/{sample}.geneBodyCoverage.r"
  shell: 'geneBody_coverage.py -r {input.bed} -i {input.bam}  -o RSeQC/{wildcards.sample} > RSeQC/{wildcards.sample}.geneBodyCoverage.log'

rule RSEQC_read_distribution:
  input:  bam = MAIN_DIR + "mapping/bamFiles/{sample}.bam" ,  bed = MAIN_DIR + 'reference/annotation/contigs.bed'
  output: read_dist = MAIN_DIR + "RSeQC/{sample}.read_distribution.txt"
  threads : 4
  shell: 'read_distribution.py -r {input.bed} -i {input.bam}  > {output.read_dist}'

############################################### RSeQC snakemake STOP ##################################

####################################GATHER ALL THE QC DATA USING multiQC######################################

# Gather all the QC results using multiQC
rule gatherQCdtaPE:
  input: STARlog =  expand(MAIN_DIR + "mapping/logFiles/{sample}.Log.final.out", sample=SAMPLE), fastQC =  expand(MAIN_DIR +"reads/{sample}.{suffix}_fastqc.html", sample = SAMPLE,suffix = SUFFIX)
  output: MAIN_DIR +"multiqc_report.zip"
  shell: 'multiqc ' + MAIN_DIR

# Gather all the QC results using multiQC
rule gatherQCdtaSE:
  input: STARlog =  expand(MAIN_DIR + "mapping/logFiles/{sample}.Log.final.out", sample=SAMPLE), fastQC =  expand(MAIN_DIR +"reads/{sample}_fastqc.html", sample = SAMPLE)
  output: MAIN_DIR +"multiqc_report.zip"
  shell: 'multiqc ' + MAIN_DIR
  
rule gatherRSEQCdta:
  input:  TIN_info =  expand(MAIN_DIR + "RSeQC/{sample}.tin.summary.txt", sample=SAMPLE), geneBodyCoverage_info =  expand(MAIN_DIR + "RSeQC/{sample}.geneBodyCoverage.r", sample=SAMPLE),junctionSaturation_info =  expand(MAIN_DIR + "RSeQC/{sample}.junctionSaturation_plot.r", sample=SAMPLE),inner_distance_freq_info = expand(MAIN_DIR + "RSeQC/{sample}.inner_distance_freq.txt", sample=SAMPLE),clipping_profile_info = expand(MAIN_DIR + "RSeQC/{sample}.clipping_profile.r", sample=SAMPLE),read_distribution_info = expand(MAIN_DIR + "RSeQC/{sample}.read_distribution.txt", sample=SAMPLE)
  output: MAIN_DIR +"RSeQC_report.pdf"
  shell: "Rscript "+ SCRIPT_DIR +"R/getRSEQC_report.R --dir "+ MAIN_DIR 
  
rule move2results:
  input: MAIN_DIR +'{file}'
  output: MAIN_DIR +"results/{file}"
  shell: 'mv {input} {output}'
	  


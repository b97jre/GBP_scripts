include:'pipeline.conf'


# The ultimate output files we want to get
rule all:
     input:
#         MAIN_DIR +"reads/multiqc_report.zip",
         MAIN_DIR + 'mapping/Gene.Stranded.htseq.count.table.txt',
    	 expand(MAIN_DIR + 'mapping/bamFiles/{sample}.sort.bam.bai', sample=SAMPLE),
#         expand(MAIN_DIR + 'mapping/biotype_size/{sample}.pdf', sample=SAMPLE)

         
         
         

#Create  Bowtie Reference
rule create_Bowtie_reference:
  input:
	  fasta = MAIN_DIR + 'reference/fasta/contigs.fa'
  output:
	  SAindex = MAIN_DIR + 'reference/BowtieReference/contigs.1.ebwt',
	  logFile = MAIN_DIR + 'reference/BowtieReference/logFile.txt'
  threads : 1
  shell:
	  'bowtie-build '+ BOWTIE_BUILD_FLAGS +'  {input.fasta} '+MAIN_DIR +'reference/BowtieReference/contigs > {output.logFile}' 

	  
# Run FASTQC on samples;
rule run_fastQC:
    input: MAIN_DIR + 'reads/{sample}.fastq.gz'
    output: MAIN_DIR +"reads/{sample}_fastqc.html"
    shell: "fastqc {input}"


# Gather all the QC results using multiQC
rule run_multiQC:
  input: 
	  original =  expand(MAIN_DIR +"reads/{sample}_fastqc.html", sample = SAMPLE),
	  trimmed =  expand(MAIN_DIR +"reads/{sample}.trimmed_fastqc.html", sample = SAMPLE)
	  untrimmed =  expand(MAIN_DIR +"reads/{sample}.untrimmed_fastqc.html", sample = SAMPLE)
  output: MAIN_DIR + "reads/multiqc_report.zip"
  shell: 'multiqc ' + MAIN_DIR + "reads/"
	  
	  

# remove adapterSequence from files.
rule trim_reads:
    input:
    	fastq = MAIN_DIR + 'reads/{sample}.fastq.gz'
    output:
    	fastq_trimmed = MAIN_DIR + 'reads/{sample}.trimmed.fastq.gz',
    	fastq_untrimmed = MAIN_DIR + 'reads/{sample}.untrimmed.fastq.gz',
    	logFile = MAIN_DIR + 'reads/{sample}.fastq.log.txt'
    threads: 1
    shell:
    	'cutadapt '+CUT_ADAPT_FLAGS +' -a '+CUT_ADAPT_ADAPTER+' --untrimmed-output {output.fastq_untrimmed} -o {output.fastq_trimmed} {input.fastq} > {output.logFile}'

# Map
rule map_reads:
     input: 
    	 read = MAIN_DIR + 'reads/{sample}.trimmed.fastq.gz', 
    	 reference = MAIN_DIR +'reference/BowtieReference/contigs.1.ebwt'
     output: 
    	 samFile =temp( MAIN_DIR + 'mapping/bamFiles/{sample}.sam'),
    	 logFile = MAIN_DIR + 'mapping/bamFiles/{sample}.bowtie1.logFile'
     threads: 8
     shell:
        'zcat {input.read} | bowtie '+BOWTIE_MAPPING_FLAGS+' -p {threads} -S '+MAIN_DIR +'reference/BowtieReference/contigs - > {output.samFile} 2> {output.logFile}'

rule split_sam_file:
	 input:
		 reads = expand(MAIN_DIR + 'mapping/bamFiles/{sample}.sam',sample=SAMPLE)
	 output:
		 expand(MAIN_DIR + 'mapping/bamFiles/{size}/{sample}.sam', sample=SAMPLE,size=LENGTHS)
	 run:
		 for readfile in input.reads:
			 shell('java -jar /glob/johanr/bin/HTStools.jar -p sequenceHandling samExtractLength -from {MIN_LENGTH} -to {MAX_LENGTH} -i {readfile}')


rule samtools_sam2bam:
     input:
    	 MAIN_DIR + 'mapping/bamFiles/{sample}.sam'
     output:
    	 temp(MAIN_DIR + 'mapping/bamFiles/{sample}.bam')
     shell:
    	 'samtools view '+ SAMTOOLS_VIEW_FLAGS +'  {input} -o {output}'


# Sort the BAM files
rule samtools_sort:
     input:
    	 MAIN_DIR + 'mapping/bamFiles/{sample}.bam'
     output:
    	 MAIN_DIR + 'mapping/bamFiles/{sample}.sort.bam'
     shell:
    	 'samtools sort {input} {MAIN_DIR}/mapping/bamFiles/{wildcards.sample}.sort'




# Index the sorted BAM files

rule samtools_index_hairpin:
     input:
    	 MAIN_DIR + 'mapping/bamFiles/{sample}.sort.bam'
     output:
    	 MAIN_DIR + 'mapping/bamFiles/{sample}.sort.bam.bai'
     shell:
    	 'samtools index {input}'





# Get biotye and size distribution of reads
rule biotype_and_size:
     input:
         MAIN_DIR + 'reads/{sample}.trimmed.fastq.gz'
     output:
         MAIN_DIR + 'mapping/biotype_size/{sample}.pdf'
     shell:
         'scripts/RNAmappingPipeline/helperScripts/get_biotype_length_distr.sh {input} reference/BowtieReference/biotypes {output} tmp/biotype_{wildcards.sample}'


    	 



# count reads for each miRNA  and merge them
rule count_reads_per_gene:
     input:
    	 bam = MAIN_DIR + 'mapping/bamFiles/{sample}.sort.bam',
    	 gff = MAIN_DIR + 'reference/annotation/contigs.gtf'
     output:
    	 MAIN_DIR + 'mapping/htseqGene/{sample}.Stranded.htseq-count.sort.txt'
     shell:
    	 'htseq-count  '+ HTSEQ_COUNT_FLAGS +'  {input.bam} {input.gff} > {output}'

rule count_reads_per_gene_sub:
     input:
    	 bam = MAIN_DIR + 'mapping/bamFiles/{size}/{sample}.sort.bam',
    	 gff = MAIN_DIR + 'reference/annotation/contigs.gtf'
     output:
    	 MAIN_DIR + 'mapping/htseqGene/{size}/{sample}.Stranded.htseq-count.sort.txt'
     shell:
    	 'htseq-count  '+ HTSEQ_COUNT_FLAGS +'  {input.bam} {input.gff} > {output}'

rule merge_reads_per_gene_into_one_file:
     input:
    	 expand(MAIN_DIR + 'mapping/htseqGene/{sample}.Stranded.htseq-count.sort.txt', sample=SAMPLE)
     output:
    	 MAIN_DIR + 'mapping/Gene.Stranded.htseq.count.table.txt'
     shell:
    	 'java -jar /glob/johanr/bin/FileParser.jar -program HTSEQCOUNT -i {MAIN_DIR}/mapping/htseqGene -suffix .Stranded.htseq-count.sort.txt -o {output}'


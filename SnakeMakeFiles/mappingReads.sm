include:"pipeline.conf"

# The ultimate output files we want to get
rule all:
     input: MAIN_DIR + "mapping/Gene.Stranded.htseq.count.table.txt", expand(MAIN_DIR + "mapping/bamFiles/{sample}.sort.bam.bai", sample=SAMPLE), expand(MAIN_DIR + "mapping/logFiles/{sample}.Log.final.out", sample=SAMPLE)

#Create  STAR Reference
rule create_STAR_reference_with_GTF:
  input: fasta = MAIN_DIR + 'reference/fasta/contigs.fa', gtf = MAIN_DIR + 'reference/annotation/contigs.gtf'
  output: SAindex =  MAIN_DIR +'reference/STARreference/SAindex' 
  threads : 16
  shell: "STAR "+STAR_BUILD_FLAGS +" --runThreadN 16 --runMode genomeGenerate --genomeDir "+MAIN_DIR +"reference/STARreference --genomeFastaFiles {input.fasta} --sjdbGTFfile {input.gtf} --sjdbOverhang "+str(READLENGTH -1)

#rule create_STAR_reference_without_annotation:
#  input: fasta = MAIN_DIR + 'reference/fasta/contigs.fa'
#  output: MAIN_DIR +"reference/STARreference"
#  threads : 16
#  shell: "testing"


# Map
rule map_reads:
     input: forward = MAIN_DIR + "reads/{sample}.1.fastq.gz", reverse = MAIN_DIR + "reads/{sample}.2.fastq.gz", reference = MAIN_DIR +"reference/STARreference/SAindex"
     output: samFile = MAIN_DIR + "mapping/{sample}/Aligned.out.sam", LogFile = MAIN_DIR + "mapping/{sample}/Log.final.out", SampleDir =  MAIN_DIR + "mapping/{sample}/"
     threads: 8
     shell: "STAR "+STAR_MAP_FLAGS +" --genomeDir "+MAIN_DIR +"reference/STARreference --readFilesIn {input.forward} {input.reverse} --runThreadN 8 --readFilesCommand zcat  --outFileNamePrefix {output.SampleDir}"

rule softLink_SamFiles:
     input: MAIN_DIR + "mapping/{sample}/Aligned.out.sam"
     output: temp(MAIN_DIR + "mapping/bamFiles/{sample}.sam")
     shell: "ln -s {input} {output}"

rule softLink_LogFiles:
     input: MAIN_DIR + "mapping/{sample}/Log.final.out"
     output: MAIN_DIR + "mapping/logFiles/{sample}.Log.final.out"
     shell: "ln -s {input} {output}"
    	 
    	 
    	 
rule samtools_sam2bam_hairpin:
     input: MAIN_DIR + "mapping/bamFiles/{sample}.sam"
     output: temp(MAIN_DIR + "mapping/bamFiles/{sample}.bam")
     shell: "samtools view "+ SAMTOOLS_VIEW_FLAGS +"  {input} -o {output}"

# Sort the BAM files
rule samtools_sort_hairpin:
     input: MAIN_DIR + "mapping/bamFiles/{sample}.bam"
     output: MAIN_DIR + "mapping/bamFiles/{sample}.sort.bam"
     shell: "samtools sort {input} {MAIN_DIR}/mapping/bamFiles/{wildcards.sample}.sort"


# Index the sorted BAM files

rule samtools_index_hairpin:
     input: MAIN_DIR + "mapping/bamFiles/{sample}.sort.bam"
     output: MAIN_DIR + "mapping/bamFiles/{sample}.sort.bam.bai"
     shell: "samtools index {input}"

# Estimate counts

# count reads for each miRNA  and merge them
rule count_reads_per_gene:
     input: bam = MAIN_DIR + "mapping/bamFiles/{sample}.sort.bam", gff = MAIN_DIR + 'reference/annotation/contigs.gtf'
     output: MAIN_DIR + "mapping/htseqGene/{sample}.Stranded.htseq-count.sort.txt"
     shell: "htseq-count  "+ HTSEQ_COUNT_FLAGS +"  {input.bam} {input.gff} > {output}"



rule merge_reads_per_gene_into_one_file:
     input:  expand(MAIN_DIR + "mapping/htseqGene/{sample}.Stranded.htseq-count.sort.txt", sample=SAMPLE)
     output: MAIN_DIR + "mapping/Gene.Stranded.htseq.count.table.txt"
     shell: "java -jar /glob/johanr/bin/FileParser.jar -program HTSEQCOUNT -i {MAIN_DIR}/mapping/htseqGene -suffix .Stranded.htseq-count.sort.txt -o {output}"

